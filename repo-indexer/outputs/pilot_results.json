{
  "query": "how is authentication implemented?",
  "timestamp": "C:\\Users\\HARSHA\\Desktop\\mini",
  "total_results": 5,
  "results": [
    {
      "id": "sha1:61e59110c6c6458975af376ec968340afcca573e",
      "document": "from fastapi import Depends, HTTPException\nfrom fastapi.security import OAuth2PasswordBearer\nfrom jose import jwt, JWTError\nfrom app.auth import SECRET_KEY, ALGORITHM\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"/login\")\n\ndef get_current_user_id(token: str = Depends(oauth2_scheme)) -> int:\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        user_id = int(payload.get(\"sub\"))\n        if not user_id:\n            raise HTTPException(status_code=401, detail=\"Invalid token payload\")\n        return user_id\n    except JWTError:\n        raise HTTPException(status_code=401, detail=\"Token is invalid or expired\")\n",
      "metadata": {
        "last_modified": "2025-06-22T19:19:17.232601",
        "tokens_estimate": 162,
        "summary": "Block: from fastapi import Depends, HTTPException...",
        "code_fingerprint": "61e59110c6c6458975af376ec968340afcca573e",
        "language": "python",
        "end_line": 17,
        "filepath": "backend\\app\\dependencies.py",
        "node_type": "block",
        "start_line": 1
      },
      "similarity_score": -0.47078919410705566
    },
    {
      "id": "sha1:1a328ce7aeb84706f615cedc3fd7c421c4baa933",
      "document": "from fastapi import Depends, HTTPException, status\nfrom jose import JWTError, jwt\nfrom fastapi.security import OAuth2PasswordBearer\nfrom sqlalchemy.orm import Session\nfrom datetime import datetime, timedelta\nfrom app import database, models, schemas\nfrom dotenv import load_dotenv\nimport os\nload_dotenv()\nSECRET_KEY = os.getenv('SECRET_KEY')\nALGORITHM = os.getenv('ALGORITHM')\nACCESS_TOKEN_EXPIRE_MINUTES = int(os.getenv('ACCESS_TOKEN_EXPIRE_MINUTES'))\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"/login\")\n\ndef create_access_token(data: dict, expires_delta: timedelta = None):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + (expires_delta or timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES))\n    to_encode.update({\"exp\": expire})\n    return jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n\ndef get_current_user(token: str = Depends(oauth2_scheme), db: Session = Depends(database.get_db)):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Invalid authentication\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        user_id: str = payload.get(\"sub\")\n        if user_id is None:\n            raise credentials_exception\n    except JWTError:\n        raise credentials_exception\n\n    user = db.query(models.User).filter(models.User.id == user_id).first()\n    if user is None:\n        raise credentials_exception\n    return schemas.UserResponse.model_validate(user)\n",
      "metadata": {
        "node_type": "block",
        "filepath": "backend\\app\\auth.py",
        "summary": "Block: from fastapi import Depends, HTTPException, status...",
        "end_line": 41,
        "last_modified": "2025-08-05T19:37:47.461369",
        "start_line": 1,
        "tokens_estimate": 383,
        "code_fingerprint": "1a328ce7aeb84706f615cedc3fd7c421c4baa933",
        "language": "python"
      },
      "similarity_score": -0.5720478296279907
    },
    {
      "id": "sha1:f1a306682e40aa324c75c52f4256e1de0ef7f6bb",
      "document": "import React, { useState } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport { jwtDecode } from 'jwt-decode';\n\nconst AddTechnician = () => {\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    department: '',\n    phone: '',\n  });\n\n  const [message, setMessage] = useState('');\n  const [messageType, setMessageType] = useState('');\n  const navigate = useNavigate();\n\n  const handleChange = (e) => {\n    setFormData((prev) => ({\n      ...prev,\n      [e.target.name]: e.target.value,\n    }));\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    const token = localStorage.getItem(\"token\"); // <-- Use your actual key\n\n    if (!token || token.trim() === \"\") {\n      setMessage(\"You must be logged in to add a technician.\");\n      setMessageType(\"error\");\n      return;\n    }\n\n    // Decode and check token expiration\n    try {\n      const decoded = jwtDecode(token);\n      if (decoded.exp * 1000 < Date.now()) {\n        setMessage(\"Session expired. Please log in again.\");\n        setMessageType(\"error\");\n        localStorage.removeItem(\"token\");\n        return;\n      }\n    } catch (e) {\n      setMessage(\"Invalid token. Please log in again.\");\n      setMessageType(\"error\");\n      localStorage.removeItem(\"token\");\n      return;\n    }\n\n    try {\n      await axios.post('http://localhost:8000/technicians/', formData, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n\n      setMessage('Technician added successfully!');\n      setMessageType(\"success\");\n      setFormData({ name: '', email: '', department: '', phone: '' });\n\n      setTimeout(() => navigate('/'), 1500);\n    } catch (err) {\n      console.error(err);\n      if (err.response?.status === 401) {\n        setMessage('Unauthorized: Please log in again.');\n      } else {\n        setMessage('Error adding technician.');\n      }\n      setMessageType(\"error\");\n    }\n  };\n\n  return (\n    <div className=\"bg-white max-w-2xl mx-auto mt-10 p-8 rounded-2xl shadow-md space-y-6\">\n      <h2 className=\"text-2xl font-bold text-gray-800 mb-4\">Add Technician</h2>\n\n      {message && (\n        <div\n          className={`text-center text-sm px-4 py-2 rounded-md mb-2\n            ${messageType === \"success\" ? \"bg-green-100 text-green-700\" : \"\"}\n            ${messageType === \"error\" ? \"bg-red-100 text-red-700\" : \"\"}\n          `}\n        >\n          {message}\n        </div>\n      )}\n\n      <form className=\"space-y-6\" onSubmit={handleSubmit}>\n        <div>\n          <label className=\"block text-sm font-semibold text-gray-700 mb-2\">Name</label>\n          <input\n            name=\"name\"\n            value={formData.name}\n            onChange={handleChange}\n            required\n            className=\"w-full border-2 border-gray-200 rounded-xl px-4 py-3 focus:outline-none\"\n            placeholder=\"Enter full name\"\n          />\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-semibold text-gray-700 mb-2\">Email</label>\n          <input\n            type=\"email\"\n            name=\"email\"\n            value={formData.email}\n            onChange={handleChange}\n            required\n            className=\"w-full border-2 border-gray-200 rounded-xl px-4 py-3 focus:outline-none\"\n            placeholder=\"Enter email address\"\n          />\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-semibold text-gray-700 mb-2\">Phone</label>\n          <input\n            name=\"phone\"\n            value={formData.phone}\n            onChange={handleChange}\n            required\n            className=\"w-full border-2 border-gray-200 rounded-xl px-4 py-3 focus:outline-none\"\n            placeholder=\"Enter phone number\"\n          />\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-semibold text-gray-700 mb-2\">Department</label>\n          <select\n            name=\"department\"\n            value={formData.department}\n            onChange={handleChange}\n            required\n            className=\"w-full border-2 border-gray-200 rounded-xl px-4 py-3 focus:outline-none\"\n          >\n            <option value=\"\">Select department</option>\n            <option>Electronics Lab</option>\n            <option>Quality Control</option>\n            <option>Production Floor</option>\n          </select>\n        </div>\n\n        <div className=\"flex justify-end space-x-4\">\n          <button\n            type=\"button\"\n            onClick={() => navigate('/instruments')}\n            className=\"border border-gray-300 text-gray-700 px-6 py-3 rounded-xl font-semibold hover:bg-gray-100 transition\"\n          >\n            Cancel\n          </button>\n          <button\n            type=\"submit\"\n            className=\"bg-gradient-to-tl from-yellow-500 via-red-500 to-pink-500 text-amber-50 p-3 font-bold rounded-xl\"\n          >\n            Add Technician\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default AddTechnician;\n",
      "metadata": {
        "summary": "Block: import React, { useState } from 'react';...",
        "code_fingerprint": "f1a306682e40aa324c75c52f4256e1de0ef7f6bb",
        "language": "javascript",
        "node_type": "block",
        "last_modified": "2025-08-05T20:47:42.958530",
        "filepath": "frontend\\src\\components\\Addtech.jsx",
        "tokens_estimate": 1245,
        "end_line": 165,
        "start_line": 1
      },
      "similarity_score": -0.6191750764846802
    },
    {
      "id": "sha1:70e1c5e8e149f60eec0c7357c8f40583c8cab6a9",
      "document": "\"use client\"\n\nimport { useState } from \"react\"\nimport { Eye, EyeOff, Mail, Lock, ArrowRight, Settings, AlertCircle, CheckCircle } from \"lucide-react\"\nimport { Link,useNavigate } from \"react-router-dom\"\n\nconst Login = () => {\n  const navigate = useNavigate();\n  const [formData, setFormData] = useState({\n    email: \"\",\n    password: \"\",\n    rememberMe: false,\n  })\n  const [showPassword, setShowPassword] = useState(false)\n  const [isLoading, setIsLoading] = useState(false)\n  const [errors, setErrors] = useState({})\n  const [message, setMessage] = useState({ type: \"\", text: \"\" })\n  const [currentView, setCurrentView] = useState(\"login\") // \"login\" or \"forgot-password\"\n  const [forgotPasswordData, setForgotPasswordData] = useState({\n    email: \"\",\n    newPassword: \"\",\n    confirmPassword: \"\",\n  })\n  const [showNewPassword, setShowNewPassword] = useState(false)\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false)\n\n  const validateForm = () => {\n    const newErrors = {}\n\n    if (!formData.email) {\n      newErrors.email = \"Email is required\"\n    } else if (!/\\S+@\\S+\\.\\S+/.test(formData.email)) {\n      newErrors.email = \"Please enter a valid email address\"\n    }\n\n    if (!formData.password) {\n      newErrors.password = \"Password is required\"\n    } else if (formData.password.length < 6) {\n      newErrors.password = \"Password must be at least 6 characters\"\n    }\n\n    setErrors(newErrors)\n    return Object.keys(newErrors).length === 0\n  }\n\n  const validateForgotPasswordForm = () => {\n    const newErrors = {}\n\n    if (!forgotPasswordData.email) {\n      newErrors.email = \"Email is required\"\n    } else if (!/\\S+@\\S+\\.\\S+/.test(forgotPasswordData.email)) {\n      newErrors.email = \"Please enter a valid email address\"\n    }\n\n    if (!forgotPasswordData.newPassword) {\n      newErrors.newPassword = \"New password is required\"\n    } else if (forgotPasswordData.newPassword.length < 6) {\n      newErrors.newPassword = \"Password must be at least 6 characters\"\n    }\n\n    if (!forgotPasswordData.confirmPassword) {\n      newErrors.confirmPassword = \"Please confirm your password\"\n    } else if (forgotPasswordData.newPassword !== forgotPasswordData.confirmPassword) {\n      newErrors.confirmPassword = \"Passwords do not match\"\n    }\n\n    setErrors(newErrors)\n    return Object.keys(newErrors).length === 0\n  }\n\n const handleSubmit = async (e) => {\n  e.preventDefault();\n\n  if (!validateForm()) return;\n\n  setIsLoading(true);\n  setMessage({ type: \"\", text: \"\" });\n\n  try {\n    const response = await fetch(\"http://localhost:8000/login\", {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        email: formData.email,\n        password: formData.password,\n      }),\n    });\n\n    if (response.ok) {\n      const data = await response.json();\n      setMessage({ type: \"success\", text: \"Login successful! Redirecting...\" });\n            localStorage.setItem(\"token\", data.access_token);\n      localStorage.setItem(\"user\", JSON.stringify(data.user));\n      setTimeout(() => {\n        navigate(\"/\");\n      }, 1500);\n    } else {\n      const err = await response.json();\n      setMessage({ type: \"error\", text: err.detail || \"Login failed\" });\n    }\n  } catch (error) {\n    setMessage({ type: \"error\", text: \"Server error. Please try again.\" });\n  } finally {\n    setIsLoading(false);\n  }\n};\n\n\n  const handleForgotPasswordSubmit = async (e) => {\n  e.preventDefault()\n\n  if (!validateForgotPasswordForm()) return\n\n  setIsLoading(true)\n  setMessage({ type: \"\", text: \"\" })\n\n  try {\n    const response = await fetch(\"http://localhost:8000/reset-password\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        email: forgotPasswordData.email,\n        new_password: forgotPasswordData.newPassword,\n      }),\n    })\n\n    if (response.ok) {\n      setMessage({\n        type: \"success\",\n        text: \"Password reset successful! You can now sign in with your new password.\",\n      })\n\n      // Switch back to login after delay\n      setTimeout(() => {\n        setCurrentView(\"login\")\n        setMessage({ type: \"\", text: \"\" })\n        setForgotPasswordData({ email: \"\", newPassword: \"\", confirmPassword: \"\" })\n      }, 2000)\n    } else {\n      const err = await response.json()\n      setMessage({ type: \"error\", text: err.detail || \"Reset failed. Try again.\" })\n    }\n  } catch (error) {\n    setMessage({ type: \"error\", text: \"Server error. Please try again.\" })\n  } finally {\n    setIsLoading(false)\n  }\n}\n\n\n  const handleInputChange = (field, value) => {\n    setFormData((prev) => ({ ...prev, [field]: value }))\n    if (errors[field]) {\n      setErrors((prev) => ({ ...prev, [field]: \"\" }))\n    }\n  }\n\n  const handleForgotPasswordInputChange = (field, value) => {\n    setForgotPasswordData((prev) => ({ ...prev, [field]: value }))\n    if (errors[field]) {\n      setErrors((prev) => ({ ...prev, [field]: \"\" }))\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-yellow-50 via-red-50 to-pink-50 flex items-center justify-center p-4\">\n      {/* Background Pattern */}\n      <div\n        className=\"absolute inset-0 opacity-5\"\n        style={{\n          backgroundImage: `linear-gradient(rgba(0, 0, 0, 0.1) 1px, transparent 1px),\n                           linear-gradient(90deg, rgba(0, 0, 0, 0.1) 1px, transparent 1px)`,\n          backgroundSize: \"20px 20px\",\n        }}\n      ></div>\n\n      <div className=\" motion-preset-expand motion-duration-1000 w-full max-w-md relative\">\n        {/* Logo Section */}\n        <div className=\"text-center mb-8\">\n          <div className=\"inline-flex items-center justify-center w-16 h-16 bg-gradient-to-br from-yellow-400 via-red-500 to-pink-600 rounded-2xl shadow-lg mb-4\">\n            <Settings className=\"w-8 h-8 text-white\" />\n          </div>\n          <h1 className=\"text-3xl font-bold bg-gradient-to-r from-gray-900 via-gray-700 to-gray-900 bg-clip-text text-transparent\">\n            Welcome Back\n          </h1>\n          <p className=\"text-gray-600 mt-2\">Sign in to your Calibration Planner account</p>\n        </div>\n\n        {/* Login Card */}\n        <div className=\"bg-white/80 backdrop-blur-lg rounded-2xl shadow-2xl border-0 overflow-hidden\">\n          {/* Card Header */}\n          <div className=\"px-6 py-6 pb-4\">\n            <h2 className=\"text-2xl font-semibold text-center text-gray-900\">\n              {currentView === \"login\" ? \"Sign In\" : \"Reset Password\"}\n            </h2>\n            <p className=\"text-center text-gray-600 mt-1\">\n              {currentView === \"login\"\n                ? \"Enter your credentials to access your dashboard\"\n                : \"Enter your email and new password\"}\n            </p>\n          </div>\n\n          {/* Card Content */}\n          <div className=\"px-6 pb-6\">\n            {currentView === \"login\" ? (\n              <form onSubmit={handleSubmit} className=\"space-y-6\">\n                {/* Keep all existing login form content exactly as is */}\n                {/* Alert Messages */}\n                {message.text && (\n                  <div\n                    className={`p-4 rounded-lg border flex items-center space-x-2 ${\n                      message.type === \"success\"\n                        ? \"border-green-200 bg-green-50 text-green-800\"\n                        : \"border-red-200 bg-red-50 text-red-800\"\n                    }`}\n                  >\n                    {message.type === \"success\" ? (\n                      <CheckCircle className=\"h-4 w-4 flex-shrink-0\" />\n                    ) : (\n                      <AlertCircle className=\"h-4 w-4 flex-shrink-0\" />\n                    )}\n                    <span className=\"text-sm\">{message.text}</span>\n                  </div>\n                )}\n\n                {/* Email Field */}\n                <div className=\"space-y-2\">\n                  <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700\">\n                    Email Address\n                  </label>\n                  <div className=\"relative\">\n                    <Mail className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                    <input\n                      id=\"email\"\n                      type=\"email\"\n                      placeholder=\"john.doe@company.com\"\n                      value={formData.email}\n                      onChange={(e) => handleInputChange(\"email\", e.target.value)}\n                      className={`w-full pl-10 pr-4 py-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-red-500 transition-colors ${\n                        errors.email ? \"border-red-300\" : \"border-gray-300\"\n                      }`}\n                      disabled={isLoading}\n                    />\n                  </div>\n                  {errors.email && (\n                    <p className=\"text-sm text-red-600 flex items-center gap-1\">\n                      <AlertCircle className=\"h-3 w-3\" />\n                      {errors.email}\n                    </p>\n                  )}\n                </div>\n\n                {/* Password Field */}\n                <div className=\"space-y-2\">\n                  <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700\">\n                    Password\n                  </label>\n                  <div className=\"relative\">\n                    <Lock className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                    <input\n                      id=\"password\"\n                      type={showPassword ? \"text\" : \"password\"}\n                      placeholder=\"Enter your password\"\n                      value={formData.password}\n                      onChange={(e) => handleInputChange(\"password\", e.target.value)}\n                      className={`w-full pl-10 pr-10 py-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-red-500 transition-colors ${\n                        errors.password ? \"border-red-300\" : \"border-gray-300\"\n                      }`}\n                      disabled={isLoading}\n                    />\n                    <button\n                      type=\"button\"\n                      onClick={() => setShowPassword(!showPassword)}\n                      className=\"absolute right-3 top-3 text-gray-400 hover:text-gray-600 transition-colors\"\n                      disabled={isLoading}\n                    >\n                      {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                    </button>\n                  </div>\n                  {errors.password && (\n                    <p className=\"text-sm text-red-600 flex items-center gap-1\">\n                      <AlertCircle className=\"h-3 w-3\" />\n                      {errors.password}\n                    </p>\n                  )}\n                </div>\n\n                {/* Remember Me & Forgot Password */}\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-2\">\n                    <input\n                      id=\"rememberMe\"\n                      type=\"checkbox\"\n                      checked={formData.rememberMe}\n                      onChange={(e) => handleInputChange(\"rememberMe\", e.target.checked)}\n                      className=\"w-4 h-4 text-red-600 border-gray-300 rounded focus:ring-red-500\"\n                      disabled={isLoading}\n                    />\n                    <label htmlFor=\"rememberMe\" className=\"text-sm text-gray-600 cursor-pointer\">\n                      Remember me\n                    </label>\n                  </div>\n                  <button\n                    type=\"button\"\n                    onClick={() => {\n                      setCurrentView(\"forgot-password\")\n                      setMessage({ type: \"\", text: \"\" })\n                      setErrors({})\n                    }}\n                    className=\"text-sm text-red-600 hover:text-red-700 font-medium transition-colors\"\n                    disabled={isLoading}\n                  >\n                    Forgot password?\n                  </button>\n                </div>\n\n                {/* Submit Button */}\n                <button\n                  type=\"submit\"\n                  disabled={isLoading}\n                  className=\"w-full py-3 px-4 bg-gradient-to-r from-yellow-500 via-red-500 to-pink-500 hover:from-yellow-600 hover:via-red-600 hover:to-pink-600 text-white font-semibold rounded-lg shadow-lg hover:shadow-xl transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                >\n                  {isLoading ? (\n                    <div className=\"flex items-center justify-center space-x-2\">\n                      <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n                      <span>Signing in...</span>\n                    </div>\n                  ) : (\n                    <div className=\"flex items-center justify-center space-x-2\">\n                      <span>Sign In</span>\n                      <ArrowRight className=\"w-4 h-4\" />\n                    </div>\n                  )}\n                </button>\n\n                {/* Demo Credentials */}\n                <div className=\"p-4 bg-blue-50 rounded-lg border border-blue-200\">\n                  <p className=\"text-sm font-medium text-blue-800 mb-2\">Demo Credentials:</p>\n                  <p className=\"text-xs text-blue-700\">Email: admin@company.com</p>\n                  <p className=\"text-xs text-blue-700\">Password: password123</p>\n                </div>\n              </form>\n            ) : (\n              <form onSubmit={handleForgotPasswordSubmit} className=\"space-y-6\">\n                {/* Alert Messages */}\n                {message.text && (\n                  <div\n                    className={`p-4 rounded-lg border flex items-center space-x-2 ${\n                      message.type === \"success\"\n                        ? \"border-green-200 bg-green-50 text-green-800\"\n                        : \"border-red-200 bg-red-50 text-red-800\"\n                    }`}\n                  >\n                    {message.type === \"success\" ? (\n                      <CheckCircle className=\"h-4 w-4 flex-shrink-0\" />\n                    ) : (\n                      <AlertCircle className=\"h-4 w-4 flex-shrink-0\" />\n                    )}\n                    <span className=\"text-sm\">{message.text}</span>\n                  </div>\n                )}\n\n                {/* Email Field */}\n                <div className=\"space-y-2\">\n                  <label htmlFor=\"forgot-email\" className=\"block text-sm font-medium text-gray-700\">\n                    Email Address\n                  </label>\n                  <div className=\"relative\">\n                    <Mail className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                    <input\n                      id=\"forgot-email\"\n                      type=\"email\"\n                      placeholder=\"Enter your email address\"\n                      value={forgotPasswordData.email}\n                      onChange={(e) => handleForgotPasswordInputChange(\"email\", e.target.value)}\n                      className={`w-full pl-10 pr-4 py-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-red-500 transition-colors ${\n                        errors.email ? \"border-red-300\" : \"border-gray-300\"\n                      }`}\n                      disabled={isLoading}\n                    />\n                  </div>\n                  {errors.email && (\n                    <p className=\"text-sm text-red-600 flex items-center gap-1\">\n                      <AlertCircle className=\"h-3 w-3\" />\n                      {errors.email}\n                    </p>\n                  )}\n                </div>\n\n                {/* New Password Field */}\n                <div className=\"space-y-2\">\n                  <label htmlFor=\"new-password\" className=\"block text-sm font-medium text-gray-700\">\n                    New Password\n                  </label>\n                  <div className=\"relative\">\n                    <Lock className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                    <input\n                      id=\"new-password\"\n                      type={showNewPassword ? \"text\" : \"password\"}\n                      placeholder=\"Enter your new password\"\n                      value={forgotPasswordData.newPassword}\n                      onChange={(e) => handleForgotPasswordInputChange(\"newPassword\", e.target.value)}\n                      className={`w-full pl-10 pr-10 py-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-red-500 transition-colors ${\n                        errors.newPassword ? \"border-red-300\" : \"border-gray-300\"\n                      }`}\n                      disabled={isLoading}\n                    />\n                    <button\n                      type=\"button\"\n                      onClick={() => setShowNewPassword(!showNewPassword)}\n                      className=\"absolute right-3 top-3 text-gray-400 hover:text-gray-600 transition-colors\"\n                      disabled={isLoading}\n                    >\n                      {showNewPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                    </button>\n                  </div>\n                  {errors.newPassword && (\n                    <p className=\"text-sm text-red-600 flex items-center gap-1\">\n                      <AlertCircle className=\"h-3 w-3\" />\n                      {errors.newPassword}\n                    </p>\n                  )}\n                </div>\n\n                {/* Confirm Password Field */}\n                <div className=\"space-y-2\">\n                  <label htmlFor=\"confirm-password\" className=\"block text-sm font-medium text-gray-700\">\n                    Confirm New Password\n                  </label>\n                  <div className=\"relative\">\n                    <Lock className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                    <input\n                      id=\"confirm-password\"\n                      type={showConfirmPassword ? \"text\" : \"password\"}\n                      placeholder=\"Confirm your new password\"\n                      value={forgotPasswordData.confirmPassword}\n                      onChange={(e) => handleForgotPasswordInputChange(\"confirmPassword\", e.target.value)}\n                      className={`w-full pl-10 pr-10 py-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-red-500 transition-colors ${\n                        errors.confirmPassword ? \"border-red-300\" : \"border-gray-300\"\n                      }`}\n                      disabled={isLoading}\n                    />\n                    <button\n                      type=\"button\"\n                      onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                      className=\"absolute right-3 top-3 text-gray-400 hover:text-gray-600 transition-colors\"\n                      disabled={isLoading}\n                    >\n                      {showConfirmPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                    </button>\n                  </div>\n                  {errors.confirmPassword && (\n                    <p className=\"text-sm text-red-600 flex items-center gap-1\">\n                      <AlertCircle className=\"h-3 w-3\" />\n                      {errors.confirmPassword}\n                    </p>\n                  )}\n                </div>\n\n                {/* Action Buttons */}\n                <div className=\"space-y-3\">\n                  <button\n                    type=\"submit\"\n                    disabled={isLoading}\n                    className=\"w-full py-3 px-4 bg-gradient-to-r from-yellow-500 via-red-500 to-pink-500 hover:from-yellow-600 hover:via-red-600 hover:to-pink-600 text-white font-semibold rounded-lg shadow-lg hover:shadow-xl transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    {isLoading ? (\n                      <div className=\"flex items-center justify-center space-x-2\">\n                        <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n                        <span>Resetting Password...</span>\n                      </div>\n                    ) : (\n                      <div className=\"flex items-center justify-center space-x-2\">\n                        <span>Reset Password</span>\n                        <ArrowRight className=\"w-4 h-4\" />\n                      </div>\n                    )}\n                  </button>\n\n                  <button\n                    type=\"button\"\n                    onClick={() => {\n                      setCurrentView(\"login\")\n                      setMessage({ type: \"\", text: \"\" })\n                      setErrors({})\n                      setForgotPasswordData({ email: \"\", newPassword: \"\", confirmPassword: \"\" })\n                    }}\n                    className=\"w-full py-3 px-4 bg-gray-100 hover:bg-gray-200 text-gray-700 font-medium rounded-lg transition-colors\"\n                    disabled={isLoading}\n                  >\n                    Back to Sign In\n                  </button>\n                </div>\n              </form>\n            )}\n          </div>\n        </div>\n\n        {/* Sign Up Link */}\n        <div className=\"text-center mt-6\">\n          <p className=\"text-gray-600\">\n            Don't have an account?{\" \"}\n            <Link to=\"/signup\" className=\"text-red-600 hover:text-red-700 font-semibold transition-colors\">\n              Sign up here\n            </Link>\n          </p>\n        </div>\n\n        {/* Footer */}\n        <div className=\"text-center mt-8 text-xs text-gray-500\">\n          <p>\u00a9 2024 Calibration Planner. All rights reserved.</p>\n          <p className=\"mt-1\">Secure \u2022 Reliable \u2022 ISO 9001 Compliant</p>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Login\n",
      "metadata": {
        "tokens_estimate": 5533,
        "summary": "Block: \"use client\"...",
        "language": "javascript",
        "code_fingerprint": "70e1c5e8e149f60eec0c7357c8f40583c8cab6a9",
        "node_type": "block",
        "end_line": 525,
        "filepath": "frontend\\src\\components\\Login.jsx",
        "last_modified": "2025-06-23T10:15:51.296916",
        "start_line": 1
      },
      "similarity_score": -0.6281013488769531
    },
    {
      "id": "sha1:46d3cdac9906ffc747ecc53315a7fd00878c020b",
      "document": "import bcrypt\nfrom sqlalchemy.orm import Session\nfrom app import models, schemas\n\ndef get_user_by_email(db: Session, email: str):\n    return db.query(models.User).filter(models.User.email == email).first()\n\ndef create_user(db: Session, user: schemas.UserCreate):\n    hashed_password = hash_password(user.password)\n    db_user = models.User(\n        name=user.name,\n        email=user.email,\n        company=user.company,\n        department=user.department,\n        role=user.role,\n        hashed_password=hashed_password,\n    )\n    db.add(db_user)\n    db.commit()\n    db.refresh(db_user)\n    return db_user\n\ndef verify_password(plain_password: str, hashed_password: str) -> bool:\n    return bcrypt.checkpw(plain_password.encode(\"utf-8\"), hashed_password.encode(\"utf-8\"))\n\ndef hash_password(password: str) -> str:\n    return bcrypt.hashpw(password.encode(\"utf-8\"), bcrypt.gensalt()).decode(\"utf-8\")\n\ndef update_password(db: Session, email: str, new_password: str):\n    user = get_user_by_email(db, email)\n    if user:\n        user.hashed_password = hash_password(new_password)\n        db.commit()\n        return True\n    return False\ndef create_instrument(db: Session, instrument: schemas.InstrumentCreate, manager_id: int):\n    db_instrument = models.Instrument(\n        serial_number=instrument.serial_number,\n        model=instrument.model,\n        manufacturer=instrument.manufacturer,\n        department=instrument.department,\n        technician=instrument.technician,\n        frequency=instrument.frequency,\n        calibration_date=instrument.calibration_date,\n        notes=instrument.notes,\n        manager_id=manager_id,\n    )\n    db.add(db_instrument)\n    db.commit()\n    db.refresh(db_instrument)\n    return db_instrument",
      "metadata": {
        "code_fingerprint": "46d3cdac9906ffc747ecc53315a7fd00878c020b",
        "end_line": 51,
        "summary": "Block: import bcrypt...",
        "start_line": 1,
        "filepath": "backend\\app\\crud.py",
        "tokens_estimate": 433,
        "language": "python",
        "node_type": "block",
        "last_modified": "2025-08-05T19:31:15.070576"
      },
      "similarity_score": -0.6683871746063232
    }
  ]
}